package org.firstinspires.ftc.teamcode.drive;

import androidx.annotation.NonNull;

import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.roadrunner.control.PIDCoefficients;
import com.acmerobotics.roadrunner.drive.DriveSignal;
import com.acmerobotics.roadrunner.drive.MecanumDrive;
import com.acmerobotics.roadrunner.followers.HolonomicPIDVAFollower;
import com.acmerobotics.roadrunner.followers.TrajectoryFollower;
import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.trajectory.Trajectory;
import com.acmerobotics.roadrunner.trajectory.TrajectoryBuilder;
import com.acmerobotics.roadrunner.trajectory.constraints.AngularVelocityConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.MecanumVelocityConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.MinVelocityConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.ProfileAccelerationConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint;
import com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.hardware.PIDFCoefficients;
import com.qualcomm.robotcore.hardware.VoltageSensor;
import com.qualcomm.robotcore.hardware.configuration.typecontainers.MotorConfigurationType;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
//import org.firstinspires.ftc.teamcode.drive.RoadrunnerOneThreeDeads;
import org.firstinspires.ftc.teamcode.trajectorysequence.TrajectorySequence;
import org.firstinspires.ftc.teamcode.trajectorysequence.TrajectorySequenceBuilder;
import org.firstinspires.ftc.teamcode.trajectorysequence.TrajectorySequenceRunner;

import java.util.Arrays;
import java.util.List;

@Config
public abstract class FullRoadrunner extends MecanumDrive {
    // Motor Configuration
    public static PIDCoefficients TRANSLATIONAL_PID = new PIDCoefficients(8, 0, 0);
    public static PIDCoefficients HEADING_PID = new PIDCoefficients(8, 0, 0);

    // Drive Motor Characteristics
    public static double TICKS_PER_REV = 537.7; // GoBilda 5203 Motor
    public static double MAX_RPM = 312; // Maximum RPM of GoBilda 5203
    public static boolean RUN_USING_ENCODER = true;
    public static PIDFCoefficients MOTOR_VELO_PID = new PIDFCoefficients(0, 0, 0, 12.5);

    // Drivetrain Dimensions
    public static double WHEEL_RADIUS = 1.88; // in inches
    public static double TRACK_WIDTH = 15.5; // in inches
    public static double WHEEL_BASE = 14.5; // Front-to-back distance

    // Motor Directions and Names
    private DcMotorEx leftFront, leftRear, rightRear, rightFront;
    private List<DcMotorEx> motors;
    private IMU imu;
    private VoltageSensor batteryVoltageSensor;

    // Trajectory Followers and Runners
    private TrajectorySequenceRunner trajectorySequenceRunner;
    private TrajectoryFollower follower;

    public FullRoadrunner(HardwareMap hardwareMap) {
        super(TRACK_WIDTH, WHEEL_BASE);
        

        // Initialize Motors
        leftFront = hardwareMap.get(DcMotorEx.class, "leftFront");
        leftRear = hardwareMap.get(DcMotorEx.class, "leftRear");
        rightRear = hardwareMap.get(DcMotorEx.class, "rightRear");
        rightFront = hardwareMap.get(DcMotorEx.class, "rightFront");

        motors = Arrays.asList(leftFront, leftRear, rightRear, rightFront);

        // Configure Motor Behavior
        for (DcMotorEx motor : motors) {
            MotorConfigurationType motorConfigurationType = motor.getMotorType().clone();
            motorConfigurationType.setAchieveableMaxRPMFraction(1.0);
            motor.setMotorType(motorConfigurationType);
        }

        // Set Motor Directions
        leftFront.setDirection(DcMotor.Direction.REVERSE);
        leftRear.setDirection(DcMotor.Direction.REVERSE);
        rightFront.setDirection(DcMotor.Direction.FORWARD);
        rightRear.setDirection(DcMotor.Direction.FORWARD);

        // Configure Encoder Behavior
        if (RUN_USING_ENCODER) {
            setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            setPIDFCoefficients(DcMotor.RunMode.RUN_USING_ENCODER, MOTOR_VELO_PID);
        }

        // Initialize IMU
        imu = hardwareMap.get(IMU.class, "imu");
        IMU.Parameters parameters = new IMU.Parameters(
            new RevHubOrientationOnRobot(
                RevHubOrientationOnRobot.LogoFacingDirection.UP,
                RevHubOrientationOnRobot.UsbFacingDirection.FORWARD
            )
        );
        imu.initialize(parameters);

        // Voltage Sensor
        batteryVoltageSensor = hardwareMap.voltageSensor.iterator().next();

        // Localizer Setup
        localizer = new RoadrunnerOneThreeDeads(hardwareMap);

        // Trajectory Follower Setup
        follower = new HolonomicPIDVAFollower(TRANSLATIONAL_PID, TRANSLATIONAL_PID, HEADING_PID,
                new Pose2d(0.5, 0.5, Math.toRadians(5)));

        // Trajectory Sequence Runner
        trajectorySequenceRunner = new TrajectorySequenceRunner(
                follower, HEADING_PID, batteryVoltageSensor, localizer);
    }

    // Velocity Constraints
    public TrajectoryVelocityConstraint getVelocityConstraint(double maxVel, double maxAngVel, double trackWidth) {
        return new MinVelocityConstraint(Arrays.asList(
                new AngularVelocityConstraint(maxAngVel),
                new MecanumVelocityConstraint(maxVel, trackWidth)
        ));
    }

    // Acceleration Constraints
    public TrajectoryAccelerationConstraint getAccelerationConstraint(double maxAccel) {
        return new ProfileAccelerationConstraint(maxAccel);
    }

    // Motor Power Control Methods
    public void setMotorPowers(double leftFront, double leftRear, double rightRear, double rightFront) {
        this.leftFront.setPower(leftFront);
        this.leftRear.setPower(leftRear);
        this.rightRear.setPower(rightRear);
        this.rightFront.setPower(rightFront);
    }

    // Motor Mode Setting
    public void setMode(DcMotor.RunMode runMode) {
        for (DcMotorEx motor : motors) {
            motor.setMode(runMode);
        }
    }

    // PIDF Coefficient Setting
    public void setPIDFCoefficients(DcMotor.RunMode runMode, PIDFCoefficients coefficients) {
        for (DcMotorEx motor : motors) {
            motor.setPIDFCoefficients(runMode, coefficients);
        }
    }

    // Trajectory Builders
    public TrajectoryBuilder trajectoryBuilder(Pose2d startPose) {
        return new TrajectoryBuilder(startPose, getVelocityConstraint(30, Math.toRadians(180), TRACK_WIDTH),
                getAccelerationConstraint(30));
    }

    public TrajectoryBuilder trajectoryBuilder(Pose2d startPose, boolean reversed) {
        return new TrajectoryBuilder(startPose, reversed, getVelocityConstraint(30, Math.toRadians(180), TRACK_WIDTH),
                getAccelerationConstraint(30));
    }

    public TrajectorySequenceBuilder trajectorySequenceBuilder(Pose2d startPose) {
        return new TrajectorySequenceBuilder(
                startPose,
                getVelocityConstraint(30, Math.toRadians(180), TRACK_WIDTH),
                getAccelerationConstraint(30),
                0.25
        );
    }

    // IMU and Pose Estimation
    public double getHeading() {
        return imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.RADIANS);
    }

    @NonNull
    @Override
    public List<Double> getWheelPositions() {
        double leftFrontPos = leftFront.getCurrentPosition();
        double leftRearPos = leftRear.getCurrentPosition();
        double rightRearPos = rightRear.getCurrentPosition();
        double rightFrontPos = rightFront.getCurrentPosition();

        return Arrays.asList(
                encoderTicksToInches(leftFrontPos),
                encoderTicksToInches(leftRearPos),
                encoderTicksToInches(rightRearPos),
                encoderTicksToInches(rightFrontPos)
        );
    }

    @Override
    public List<Double> getWheelVelocities() {
        double leftFrontVelo = leftFront.getVelocity();
        double leftRearVelo = leftRear.getVelocity();
        double rightRearVelo = rightRear.getVelocity();
        double rightFrontVelo = rightFront.getVelocity();

        return Arrays.asList(
                encoderTicksToInches(leftFrontVelo),
                encoderTicksToInches(leftRearVelo),
                encoderTicksToInches(rightRearVelo),
                encoderTicksToInches(rightFrontVelo)
        );
    }

    // Utility Methods
    public double encoderTicksToInches(double ticks) {
        return WHEEL_RADIUS * 2 * Math.PI * ticks / TICKS_PER_REV;
    }

    @Override
    public void setDriveSignal(DriveSignal driveSignal) {
        setMotorPowers(driveSignal.Vx, driveSignal.Vy, driveSignal.Vy, driveSignal.Vx);
    }

    // Additional methods for trajectory following can be added as needed
}